{"version":3,"sources":["components/ContactsForm/ContactsForm.js","components/ContactsList/ContactsListItem.js","components/ContactsList/ContactsList.js","components/Container/Container.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContactsForm","initialState","name","number","state","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","contact","id","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","Component","PropsType","func","isRequired","ContactItem","onDeleteContact","onClick","prototype","PropTypes","string","ContactsList","findContact","map","Container","children","Filter","App","contacts","filter","addContact","hasContacts","alert","find","toLocaleLowerCase","normalizedFilter","length","toLowerCase","includes","deleteContact","contactId","prevState","localStorage","getItem","parsedContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0bc0c93.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropsType from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nclass ContactsForm extends Component {\r\n  initialState = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    };\r\n\r\n    this.props.onSubmit(contact);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState(this.initialState);\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n            id={this.nameInputId}\r\n          />\r\n        </label>\r\n        <label htmlFor={this.numberInputId}>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n            id={this.numberInputId}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactsForm.PropsType = {\r\n  onSubmit: PropsType.func.isRequired,\r\n};\r\n\r\nexport default ContactsForm;","import PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({ id, name, number, onDeleteContact }) => {\r\n  return (\r\n    <li>\r\n      {name}: {number}\r\n      <button\r\n        type=\"submit\"\r\n        onClick={() => onDeleteContact(id)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.prototype = {\r\n  id: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.number.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;","import ContactItem from './ContactsListItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactsList = ({ findContact, onDeleteContact }) => {\r\n  return (\r\n    <ul>\r\n      {findContact().map(({ id, name, number }) => {\r\n        return (\r\n          <ContactItem\r\n            key={id}\r\n            id={id}\r\n            name={name}\r\n            number={number}\r\n            onDeleteContact={onDeleteContact}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactsList.prototype = {\r\n  findContact: PropTypes.func.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;","\r\nconst Container = ({ children }) => (\r\n  <div>{children}</div>\r\n);\r\n\r\nexport default Container;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h3>Find contacts by name</h3>\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={this.props.value}\r\n          onChange={this.props.onChange}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import React, { Component } from 'react';\nimport ContactsForm from './components/ContactsForm';\nimport ContactsList from './components/ContactsList';\nimport Container from './components/Container';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    // console.log('App componentDidMount');\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  addContact = contact => {\n    if (!this.hasContacts(contact.name)) {\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    } else {\n      alert(`${contact.name} is already in contacts`);\n    }\n  };\n\n  hasContacts = name => {\n    return this.state.contacts.find(contact => {\n      return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase();\n    });\n  };\n\n  findContact = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    if (filter.length) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter),\n      );\n    } else {\n      return contacts;\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    return (\n      <Container>\n      \n        <h1> PhoneBook </h1>\n        <ContactsForm onSubmit={this.addContact} />\n\n        <div>\n          <h2> Contacts </h2>\n          <Filter value={this.state.filter} onChange={this.handleChange} />\n          <ContactsList\n            findContact={this.findContact}\n            onDeleteContact={this.deleteContact}\n          />\n        </div>\n\n      </Container>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}